//===- ProtoOpDefinitionsGen.cpp - Proto op definitions generator ---------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// ProtoOpDefinitionsGen uses the description of operations to generate Proto
// definitions for ops.
//
//===----------------------------------------------------------------------===//

#include "OpGenHelpers.h"
#include "mlir/TableGen/CodeGenHelpers.h"
#include "mlir/TableGen/GenInfo.h"
#include "mlir/TableGen/Operator.h"
#include "mlir/TableGen/Pass.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/FormatVariadic.h"
#include "llvm/TableGen/Error.h"
#include "llvm/TableGen/Record.h"

using namespace llvm;
using namespace mlir;
using namespace mlir::tblgen;
using llvm::formatv;
using llvm::RecordKeeper;

static llvm::cl::OptionCategory protoGenCat("Options for -gen-op-proto");
static llvm::cl::opt<std::string> protoGroupName(
    "proto-prefix",
    llvm::cl::desc("The prefix to use for this group of passes. The "
                   "form will be mlirCreate<prefix><passname>, the "
                   "prefix can avoid conflicts across libraries."),
    llvm::cl::cat(protoGenCat));

const char *const protoFileHeader = R"(
syntax = "proto3";

package protocir;
option java_package = "org.jacodb.impl.grpc";

import "setup.proto";
)";

const char *const protoOpMessage = R"(
message CIR{0} {{
}
)";

static bool emitOpProtoDefs(const RecordKeeper &records, raw_ostream &os) {
  os << "/* Autogenerated by mlir-tblgen; don't manually edit. */\n";
  os << protoFileHeader;

  std::vector<const Record *> defs = getRequestedOpDefinitions(records);
  for (auto *def : defs) {
    Operator op(*def);
    os << formatv(protoOpMessage, op.getCppClassName());
  }
  return false;
}

static mlir::GenRegistration genOpProto("gen-op-proto",
                                        "Generate op Proto definitions",
                                        &emitOpProtoDefs);
