//===- ProtoOpDefinitionsGen.cpp - Proto op definitions generator ---------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// ProtoOpDefinitionsGen uses the description of operations to generate Proto
// definitions for ops.
//
//===----------------------------------------------------------------------===//

#include "OpGenHelpers.h"
#include "mlir/TableGen/CodeGenHelpers.h"
#include "mlir/TableGen/GenInfo.h"
#include "mlir/TableGen/Operator.h"
#include "mlir/TableGen/Pass.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/FormatVariadic.h"
#include "llvm/TableGen/Error.h"
#include "llvm/TableGen/Record.h"

#include <map>
#include <set>
#include <string>

using namespace llvm;
using namespace mlir;
using namespace mlir::tblgen;
using llvm::formatv;
using llvm::RecordKeeper;

static llvm::cl::OptionCategory protoGenCat("Options for -gen-op-proto");
static llvm::cl::opt<std::string> protoGroupName(
    "proto-prefix",
    llvm::cl::desc("The prefix to use for this group of passes. The "
                   "form will be mlirCreate<prefix><passname>, the "
                   "prefix can avoid conflicts across libraries."),
    llvm::cl::cat(protoGenCat));

const char *const protoFileHeader = R"(
syntax = "proto3";

package protocir;
option java_package = "org.jacodb.impl.grpc";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "setup.proto";
import "enumgen.proto";
)";

const char *const protoOpMessageStart = R"(
message CIR{0} {{)";

const char *const protoOpMessageField = R"(
  {0} {1} = {2};)";

const char *const protoOpMessageEnd = R"(
}
)";

const char *const protoCirOpMessageStart = R"(
message CIROp {{
  CIROpID base = 1;
  oneof operation {{
)";

const char *const protoCirOpMessageEnd = R"(
  }
}
)";

const char *const protoCirOpMessageField = R"(
    CIR{0} {1} = {2};)";

const std::map<StringRef, StringRef> cppTypeToProto = {
    {"uint64_t", "uint64"},
    {"uint32_t", "uint32"},
    {"::llvm::StringRef", "string"},
    {"::llvm::APInt", "uint64"},
    {"::std::optional<uint64_t>", "optional uint64"},
    {"::llvm::ArrayRef<int32_t>", "repeated uint32"},
    {"::std::optional< ::llvm::APFloat >", "double"},
    {"::std::optional< ::llvm::StringRef >", "optional string"},
    {"::std::optional<::cir::GlobalDtorAttr>",
     "optional google.protobuf.Empty"},
    {"::std::optional<::cir::GlobalCtorAttr>",
     "optional google.protobuf.Empty"},
    {"::mlir::TypedAttr", "google.protobuf.Any"},
    {"::cir::VisibilityAttr", "CIRVisibilityKind"},
    {"::cir::FuncType", "CIRTypeID"},
    {"::mlir::Type", "CIRTypeID"},
    {"::cir::PointerType", "CIROpID"},
    {"::cir::IntType", "CIROpID"},
    {"::cir::MethodType", "CIROpID"},
    {"::cir::DataMemberType", "CIROpID"},
    {"::cir::ComplexType", "CIROpID"},
    {"::cir::VectorType", "CIROpID"},
    {"::cir::BoolType", "CIROpID"}};

const std::set<StringRef> typeBlackList = {
    "::std::optional< ::mlir::ArrayAttr >",
    "::std::optional<::mlir::Attribute>",
    "::std::optional<::cir::DynamicCastInfoAttr>",
    "::std::optional<::cir::ASTVarDeclInterface>",
    "::mlir::ArrayAttr",
    "::cir::CmpThreeWayInfoAttr",
    "::cir::BitfieldInfoAttr",
    "::std::optional<::cir::AddressSpaceAttr>",
    "::std::optional<::cir::ASTCallExprInterface>",
    "::cir::ExtraFuncAttributesAttr"};

static bool emitOpProtoDefs(const RecordKeeper &records, raw_ostream &os) {
  os << "/* Autogenerated by mlir-tblgen; don't manually edit. */\n";
  os << protoFileHeader;

  std::vector<const Record *> defs = getRequestedOpDefinitions(records);
  os << formatv(protoCirOpMessageStart);
  int caseIdx = 1;
  for (auto *def : defs) {
    Operator op(*def);
    os << formatv(protoCirOpMessageField, op.getCppClassName(),
                  llvm::convertToSnakeFromCamelCase(op.getCppClassName()),
                  ++caseIdx);
  }
  os << formatv(protoCirOpMessageEnd);

  for (auto *def : defs) {
    Operator op(*def);
    const int numOperands = op.getNumOperands();
    os << formatv(protoOpMessageStart, op.getCppClassName());
    int messageIdx = 0;
    for (int i = 0; i != numOperands; ++i, ++messageIdx) {
      const auto &operand = op.getOperand(i);
      const auto &operandType = operand.constraint.getCppType();
      auto it = cppTypeToProto.find(operandType);
      const auto &operandTypeProto =
          it != cppTypeToProto.end() ? it->second : operandType;
      if (operand.name.empty())
        continue;
      const auto &operandName = llvm::convertToSnakeFromCamelCase(operand.name);
      if (typeBlackList.count(operandTypeProto)) {
        --messageIdx;
      } else if (operand.isOptional()) {
        os << formatv(protoOpMessageField,
                      formatv("optional {0}", operandTypeProto), operandName,
                      std::to_string(messageIdx + 1));
      } else if (operand.isVariadic()) {
        os << formatv(protoOpMessageField,
                      formatv("repeated {0}", operandTypeProto), operandName,
                      std::to_string(messageIdx + 1));
      } else {
        os << formatv(protoOpMessageField, operandTypeProto, operandName,
                      std::to_string(messageIdx + 1));
      }
    }
    os << "\n";
    const int numAttributes = op.getNumNativeAttributes();
    for (int i = 0; i != numAttributes; ++i, ++messageIdx) {
      const auto &rawAttr = op.getAttribute(i).attr;
      const auto &rawAttrName = op.getAttribute(i).name;
      if (rawAttrName.empty())
        continue;
      const auto &attr =
          rawAttr.hasDefaultValue() ? rawAttr.getBaseAttr() : rawAttr;
      auto it = cppTypeToProto.find(attr.getReturnType().str());
      auto &attrType =
          it != cppTypeToProto.end() ? it->second : attr.getReturnType();
      if (typeBlackList.count(attrType)) {
        --messageIdx;
      } else if (attr.isEnumAttr()) {
        EnumAttr enumAttr(attr.getDef());
        StringRef enumName = enumAttr.getEnumClassName();
        os << formatv(protoOpMessageField, formatv("CIR{0}", enumName),
                      rawAttrName, std::to_string(messageIdx + 1));
      } else if (attr.isOptional() && attr.getBaseAttr().isEnumAttr()) {
        EnumAttr enumAttr(attr.getBaseAttr().getDef());
        StringRef enumName = enumAttr.getEnumClassName();
        os << formatv(protoOpMessageField, formatv("optional CIR{0}", enumName),
                      rawAttrName, std::to_string(messageIdx + 1));
        // } else if (attr.isOptional()) {
        //   os << formatv(protoOpMessageField, formatv("optional {0}",
        //   attrType),
        //                 rawAttrName, std::to_string(messageIdx + 1));
      } else {
        os << formatv(protoOpMessageField, attrType, rawAttrName,
                      std::to_string(messageIdx + 1));
      }
    }
    os << "\n";
    unsigned numSuccessors = op.getNumSuccessors();
    for (unsigned i = 0; i != numSuccessors; ++i, ++messageIdx) {
      const NamedSuccessor &successor = op.getSuccessor(i);
      if (successor.name.empty())
        continue;
      const auto &successorName =
          llvm::convertToSnakeFromCamelCase(successor.name);
      os << formatv(protoOpMessageField, "CIRBlockID", successorName,
                    std::to_string(messageIdx + 1));
    }
    os << formatv(protoOpMessageEnd);
  }
  return false;
}

static mlir::GenRegistration genOpProto("gen-op-proto",
                                        "Generate op Proto definitions",
                                        &emitOpProtoDefs);
